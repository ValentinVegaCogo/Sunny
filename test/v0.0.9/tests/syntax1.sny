# Automatically handle unused AsResult values?
fun main() {
  let input = '123'

  let regexs = [
    Regex::new(r'^\d$')
    Regex::new(r'^\w$')
  ]

  assert(regexs.some(/regex/ regex.matches(input)))
  assert(regexs.which(/regex/ regex.matches(input)) == 1)
  assert(regexs.which_ones(/regex/ regex.matches(input)) == [1])
}

fun Vec<T>::some(self, predicate: fun (T) -> bool) -> bool {
  for value in self {
    if predicate(value) {
      return true
    }
  }
  return false
}

# [1_u16, 2_u16].some_is(1_u8)
fun Vec<T>::some_is<O>(self, other: O) -> bool
where
  T: impl Eq<O>
{
  for value in self {
    if value == other {
      return true
    }
  }
}

fun assert(expr: bool, message := "") {
  if !expr {
    throw AssertionError::new(message.or("Assertion failed"))
  }
}

const fun debug_assert(expr: bool) {
  use terminal::{ green, red }
  let color = expr ? green : red
  println(color(stringify!(expr)))
}

fun Vec<T>::with_each(self, change: fun (T) -> T) -> Self {
  let new: T[self.len()] = []
  for value in self {
    new.push(change(value))
  }
  return new
}

fun Vec<T>::map(self, change: fun (T) -> T) -> Self {
  for (i, value) in self.iter().enumerate() {
    # this can be optimized
    self.set(i, change(value))
  }
  return self
}

fun Vec<T>::set(self, index: Integer, value: T) -> Result<(), MemoryError> {
  if index.abs() < self.len() {
    return Err(MemoryError::InvalidIndex)
  }
  let index: usize = index.is_negative()
    ? self.len() + index
    : index.into()
  set_bytes_at(self.ptr + size_of<T>() * index, value)!!
  return Ok(())
}

# idk, just keep this private
class Function<G, A, O> {
  struct {
    name: String,
    generics: Generic[]
    args: Argument[],
    output: Struct
  }
  struct Generic<T> {
    type = T,
    default: T,
    implements: Model[]
  }
  struct Argument<T> {
    type = T,
    default: T
  }

  # this is the `a()` expression
  internal fun call(generics, args) -> O {}

  # this prevents crashing the program
  fun try(a, b) -> Result<O, Error> {}
}

class Test {
  pub typedef TestFunction = fun () -> ()
  fun test(f: TestFunction, { super }: Context, name: ToString = "") -> TestFunction {
    let name = name.or(f'{super.name}::{f.name}')
    let passed = f.try().is_ok()
    println(f'{bold(name)}: {passed ? green('Ok') : red('Failed')}')
    # add execution time, exit code
  }
}

model Display {
  fun display(self) -> String
  fun pretty_display(self) -> String
}

# inspired by the behavior of the '||' operator in JavaScript
fun String::or(self, other: Display) -> String {
  return self.is_empty()
    ? other.display()
    : self
}

@test("Vec::set")
fun does_it_work() {
  let vec = [1, 2, 3]
  vec.set(0, 9)
  assert(vec == [9, 2, 3])
  vec.set((-1), 5)
  assert(vec == [9, 2, 5])
}

fun println(data: Display) {
  sys::stdout()
    .write(data.display())
    .write(sys::LINE_ENDING)
    .flush()
}

fun eprintln(data: Display) {
  sys::stderr()
    .write(data.display())
    .write(sys::LINE_ENDING)
    .flush()
}

@consecutive
fun eprintln(data: Display[]) {
  let stderr = sys::stderr();
  for value in data {
    stderr
      .write(value.display())
      .write(sys::LINE_ENDING)
  }
  stderr.flush()
}

# just a representation
const fun throw(value: Error) {
  eprintln(value.display())
  eprintln(sys::TAB)
  eprintln(f"at {src!()}:{line!()}:{column!()}")
  process::exit(1)
}


namespace local {
  name: (mutable: true, type: &String, value: Value::String('world'))
}
# nothing can be modified. no `mutable` property needed
# when you assign a value its stored in `local`
# and doesnt override that variable in `global`
const namespace global {
  println: (type: fun <T: Display>(T) -> ())
}

fun println<T: Display>(message: T) {
  stdout()
    .write(message.display())
    .write(ENDL)
    .flush()
}

scopes = [local, ...uppers, global]
fun a() {
  let b = { n => randint() }
  return // { { n => b.n * 2 } }
}

# randint -> 4
let foo = a()
# foo -> 8
let bar = foo()

scopes = [a = { b: 5 }, main, global]
scopes = [<anonymous>.deps = { b: &b }, <anonymous>.runtime = {  }, main, global]

Function {
  name: String
  args, returned_type: &Class
  deps: Namespace
  runtime: Namespace
}

class A {
  struct {
    b: u8
  }
  fun ToString::to_string = path::to::ext::to_string
}

# ./path/to/ext.sny
  use mod::A
  fun to_string(self: A) -> String { ... }

class u8 {
  struct { }
  impl Number {
    pub const MIN = 0_u8
    pub const MAX = 2_u8 ** 8
  }
  fun ToString::to_string(self) {
    # internal code
  }
}

template Number
where
  Self: Add + Sub + Mul + Div    # etc
{
  const MIN: Self
  const MAX: Self
}

# Example: DateTime::Add<Duration, Output = Result<DateTime, DateTimeError>>
template Add<T = Self, Output = Self> {
  fun add(self, other: T) -> Output
}
