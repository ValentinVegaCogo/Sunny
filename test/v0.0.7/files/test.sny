# Comment

trait Any {}

trait Init {
  fun new()
}

fun create<T: impl Init>() -> T {
  return T::new()
}

struct Point {
  pub [x, y]: u8  
}

extend Point {
  impl Display
  pub fun new(x = 0, y = 0) {
    return Point { x, y }
  }
}

fun main(_args: String[]) {
  let point = Point::new()
  println(point)
  assert point.x == 0
}

trait Number
where
  Self: Add + Sub + Mul + Div + Pow + Mod
{
  const [MIN, MAX]: Self
}

struct u8 { ... }

extend u8 {
  priv const fun min() -> Self { return 0_u8 }
  impl Number {
    const [MIN, MAX]: Self = [Self::min(), 255_u8]
  }
  impl Add {
    internal fun add<T>(self, other: T) -> T { ... }
  }
  impl FromString {
    fun from(string: String) -> Self { ... }
  }
}

trait Number { ... }
trait Int { ... }
trait Float { ... }

extend BigDecimal {
  impl Float { ... }
}