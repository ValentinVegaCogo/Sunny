const null
const infy
const nanum
const true
const false

class Type:
	fun __ctor__(test: (value, model?: dict) -> bool)
type TypeOf<src: any?>

type Class = {
	__super?: Class
	__static?: dict
	prototype: dict.AnySize
}

type Not<...T: Type[]> = (value) => TypeOf<value> not in T

type void = (null | $UNSET)
type any = Not<void>

type bool = (true | false)
type num<range?: Range = (-infy) to infy>
type Range

class str<length?: (Range | num) = 1 to infy>:
	static:
		fun from_code(code: num) -> str<1>
	fun __ctor__(value?: any?)
	fun code_at(index: num) -> num

class RegExp:
	fun __ctor__(pattern: str, flags: str)

class list<T?: Type = any?, size?: (Range | num) = 1 to infy>:
	static type AnySize<T> = list<T, 0 to infy>
	fun __ctor__(...values?: T[size], size?: num)
	fun at(index: num): T
	fun remove(index: num) -> void
	fun insert(value: T, index: num) -> void
	fun add(value: T) -> void
	fun prepend(value: T) -> void

class dict<T?: Type = any?, K?: Not<void> = str, size?: (Range | num) = 1 to infy>:
	fun __ctor__(...entries?: [K, V][size], size?: num)
	fun keys() -> K[size]
	fun values() -> V[size]
	fun entries() -> [K, V][size]

type Param = {
	type?: Type = any?
	optional?: bool = false
	default_value?: any?
	rest?: bool = false
}
type Function<P?: Param[*] = [], R?: Type = void> = {
	name: str
}
type ReturnedBy<function: Function>

fun print(...values: any?[], sep?: str = ' ', end?: str = $EOL) -> void
fun typeof(value: any?) -> (
	| 'void'
	| 'boolean'
	| 'number'
	| 'range'
	| 'string'
	| 'regexp'
	| 'list',
	| 'dict'
	| 'function'
	| 'class'
	| 'type'
)
fun isinstance(value: any?, type: Type) -> bool

class Range<T?: (num | str) = num>:
	const x: T
	const y: T
	fun __ctor__(self, x: T, y: T):
		self += { x, y }
	fun __forin__(self):
		if self.x == self.y:
			return Generator.yield(self.x)
		if T == num:
			fun handler(yield):
				a = self.x
				b = self.y
				if a < b:
					while a <= b:
						yield(a)
						a++
				else:
					while a >= b:
						yield(a)
						a--
			return Generator(handler)
		else:
			fun handler(yield):
				a = self.x.code_at(0)
				b = self.y.code_at(0)
				if a < b:
						while a <= b:
							yield(str.from_code(a))
							a++
					else:
						while a >= b:
							yield(str.from_code(a))
							a--
			return Generator(handler)
	fun __incl__(self, value: T):
		[min, max] = T == num
			? sort(self.x, self.y)
			: sort(self.x.code_at(0), self.y.code_at(0))
		return min >= value and value <= max
