(...)           // list or lambda
(...: ...)      // lambda
(... = ...)     // lambda
(...) =         // lambda or syntax error
(...) =>        // lambda
(...) -         // lambda or type error
(...) -> ...    // type or lambda
(...) -> ... => // lambda

...<      // operation or class with model
[class]<  // class with model

class num:
	static:
		const number_pattern = /^(?:[0-9]+(?:'[0-9]+)*(?:\.[0-9]+)?(?:[eE][-+]?[0-9]+)|0x[0-9a-fA-F]+|0b[01]+)$/
		const InRange = Type((number: Self, model as { range: Range }) => number in range)
	fun __ctor__(value: str) -> Self:
		if number_pattern.test(value):
			return $PARSE(value)
		return nanum

class str:
	static const Matches = Type(
			(value: Self, model as { pattern: RegExp })
				=> pattern.test(value)
		)
	// how to implement test functions?

class Type:
	fun __ctor__(checker: (value: any?, model?: dict) -> bool)

class dict<K: Type = str, V: Type = any?>:
	fun __ctor__(entries: /* any?[*][2] */ [K[], V[]]):
		return

arr<I = arr<I = (void | any)>, size = 2>

class arr<I: (Type | Type[*]) = any?, size: (Range<min = 0> | num.InRange<Range(0, infy)>) = Range(1, infy)>:
	static type AnySize<I> = arr<I, Range(0, infy)>

class = {
	type = 'class'
	data = {
		name: str
	}	
}